// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Order_domain.Data;

namespace Order_domain.Migrations
{
    [DbContext(typeof(OrderDbContext))]
    [Migration("20181122120307_OrderItems_Orders")]
    partial class OrderItems_Orders
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Order_domain.Customers.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<string>("PhoneNumber")
                        .HasColumnName("PhoneNumber");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Order_domain.Items.Item", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AmountOfStock");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("Order_domain.Orders.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CustomerId");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Order_domain.Orders.OrderItems.OrderItem", b =>
                {
                    b.Property<Guid>("OrderId");

                    b.Property<Guid>("ItemId");

                    b.Property<int>("OrderedAmount");

                    b.Property<DateTime>("ShippingDate");

                    b.HasKey("OrderId", "ItemId");

                    b.HasIndex("ItemId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("Order_domain.Customers.Customer", b =>
                {
                    b.OwnsOne("Order_domain.Customers.Addresses.Address", "Address", b1 =>
                        {
                            b1.Property<Guid?>("CustomerId");

                            b1.Property<string>("Country")
                                .HasColumnName("Country");

                            b1.Property<string>("HouseNumber")
                                .HasColumnName("HouseNumber");

                            b1.Property<string>("PostalCode")
                                .HasColumnName("PostalCode");

                            b1.Property<string>("StreetName")
                                .HasColumnName("StreetName");

                            b1.ToTable("Customers");

                            b1.HasOne("Order_domain.Customers.Customer")
                                .WithOne("Address")
                                .HasForeignKey("Order_domain.Customers.Addresses.Address", "CustomerId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("Order_domain.Customers.Emails.Email", "Email", b1 =>
                        {
                            b1.Property<Guid?>("CustomerId");

                            b1.Property<string>("Complete")
                                .HasColumnName("Email");

                            b1.Property<string>("Domain");

                            b1.Property<string>("LocalPart");

                            b1.ToTable("Customers");

                            b1.HasOne("Order_domain.Customers.Customer")
                                .WithOne("Email")
                                .HasForeignKey("Order_domain.Customers.Emails.Email", "CustomerId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Order_domain.Items.Item", b =>
                {
                    b.OwnsOne("Order_domain.Items.Prices.Price", "Price", b1 =>
                        {
                            b1.Property<Guid>("ItemId");

                            b1.Property<decimal>("Amount")
                                .HasColumnName("Price");

                            b1.ToTable("Items");

                            b1.HasOne("Order_domain.Items.Item")
                                .WithOne("Price")
                                .HasForeignKey("Order_domain.Items.Prices.Price", "ItemId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Order_domain.Orders.Order", b =>
                {
                    b.HasOne("Order_domain.Customers.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Order_domain.Orders.OrderItems.OrderItem", b =>
                {
                    b.HasOne("Order_domain.Items.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Order_domain.Orders.Order", "MainOrder")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.OwnsOne("Order_domain.Items.Prices.Price", "ItemPrice", b1 =>
                        {
                            b1.Property<Guid>("OrderItemOrderId");

                            b1.Property<Guid>("OrderItemItemId");

                            b1.Property<decimal>("Amount")
                                .HasColumnName("Price");

                            b1.ToTable("OrderItems");

                            b1.HasOne("Order_domain.Orders.OrderItems.OrderItem")
                                .WithOne("ItemPrice")
                                .HasForeignKey("Order_domain.Items.Prices.Price", "OrderItemOrderId", "OrderItemItemId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
